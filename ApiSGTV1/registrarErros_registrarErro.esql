

CREATE COMPUTE MODULE registrarErros_registrarErro
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		DECLARE ERRO CHAR '';
		
		IF EXISTS(InputExceptionList.RecoverableException[]) THEN
			
			DECLARE envRef REFERENCE TO Environment.Variables;
			DECLARE error REFERENCE TO InputExceptionList.*[1];
			DECLARE lastError REFERENCE TO InputExceptionList.*[1];
			DECLARE concatenaErros CHARACTER ' | Message exception: ';

			WHILE error.Number IS NOT NULL do
				set envRef.BrokerData.LastError.Label = error.Label;
				set envRef.BrokerData.LastError.Number = cast(error.Number as char);
				set envRef.BrokerData.LastError.Text = error.Text;
				MOVE error LASTCHILD;
			END WHILE;

			MOVE error PARENT;
			MOVE error FIRSTCHILD;
			MOVE error NEXTSIBLING NAME 'Insert';

			WHILE LASTMOVE(error) DO
				SET concatenaErros = concatenaErros || ' - ' || COALESCE(error.Text,'');
				MOVE error NEXTSIBLING;
			END WHILE;

			SET ERRO = COALESCE(envRef.BrokerData.LastError.Text,'');
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || ERRO || ' - ' || COALESCE(concatenaErros, '');
		
		END IF;

		DECLARE am NAMESPACE 'http://wso2.org/apimanager';
		
		IF FIELDTYPE(InputRoot.XMLNSC.am:fault.am:code) IS NOT NULL THEN
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || InputRoot.XMLNSC.am:fault.am:description;
		END IF;
		
		DECLARE soap NAMESPACE 'http://tempuri.org/fila/';
		--DECLARE soap NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope';
		
		IF FIELDTYPE(InputRoot.SOAP.soap:Body.soap:Fault.soap:faultstring) IS NOT NULL THEN
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || InputRoot.SOAP.Body.Fault.faultstring;
		END IF;

		IF EXISTS(InputRoot.BLOB.BLOB[]) THEN
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || ERRO || ' - ';
			SET ERRO = ERRO || CAST(InputRoot.BLOB.BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		END IF;

		-- DECLARA VARIAVEIS
		DECLARE jsonBlob BLOB;
		DECLARE jsonMsg CHAR;
		DECLARE options INTEGER BITOR(FolderBitStream, ValidateNone);	
		
		-- ERRO							
		SET OutputRoot.JSON.Data.idEtapa = Environment.Variables.idEtapa;
		SET OutputRoot.JSON.Data.erro = ERRO;
		SET OutputRoot.JSON.Data.localTransactionId = Environment.Monitoring.EventCorrelation.localTransactionId;

		SET jsonBlob = ASBITSTREAM(OutputRoot.JSON.Data,,1208,,,,options);
		SET jsonMsg = CAST(jsonBlob AS CHAR ENCODING 1208);	
		
		CALL procs.upsetErroContrato(jsonMsg, Environment.Variables.idErro);
		COMMIT;

		-- ETAPA
		CALL procs.selectNomeEtapa(Environment.Variables.etapa.nome, Environment.Variables.etapa.tipo, Environment.Variables.etapa.Item[]);
		
		SET OutputRoot.JSON.Data.idEtapa = Environment.Variables.idEtapa;
		SET OutputRoot.JSON.Data.idHistorico = Environment.Variables.idHistorico;
		SET OutputRoot.JSON.Data.idNomeEtapa = Environment.Variables.etapa.Item.id;
		SET OutputRoot.JSON.Data.status = Environment.Variables.etapa.status;
		SET OutputRoot.JSON.Data.sucesso = Environment.Variables.etapa.sucesso;

		SET jsonBlob = ASBITSTREAM(OutputRoot.JSON.Data,,1208,,,,options);
		SET jsonMsg = CAST(jsonBlob AS CHAR ENCODING 1208);	
		
		CALL procs.upsetEtapaContrato(jsonMsg, Environment.Variables.idEtapa);
		COMMIT;		
		
		-- HISTORICO
		SET OutputRoot.JSON.Data.idFila = Environment.Variables.msgMQ.idFila;
		SET OutputRoot.JSON.Data.idRegistro = Environment.Variables.msgMQ.idRegistro;
		SET OutputRoot.JSON.Data.id = Environment.Variables.msgMQ.idHistorico;
		SET OutputRoot.JSON.Data.status = 'Falha';
		SET OutputRoot.JSON.Data.sucesso = false;
			
		SET jsonBlob = ASBITSTREAM(OutputRoot.JSON.Data,,1208,,,,options);
		SET jsonMsg = CAST(jsonBlob AS CHAR ENCODING 1208);	
		
		CALL procs.upsetHistoricoContrato(jsonMsg, Environment.Variables.idHistorico);
		COMMIT;		
				
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
