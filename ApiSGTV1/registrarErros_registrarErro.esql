

CREATE COMPUTE MODULE registrarErros_registrarErro
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();

		--VARIAVEL QUE GUARDARÁ A MENSAGEM DE ERRO
		DECLARE ERRO CHAR '';
		
		--CONFIGURAÇÃO DO SUCESSO E STATUS PARA ATUALIZAR A ETAPA E O HISTORICO
		SET Environment.Variables.etapa.status = 'Falha';
		SET Environment.Variables.etapa.sucesso = false;
			
		--DECLARAR NAMESPACE PARA VALIDAÇÃO SOAP
		DECLARE am NAMESPACE 'http://wso2.org/apimanager';
		DECLARE soap NAMESPACE 'http://tempuri.org/fila/';

		--VALIDAÇÃO DO ERRO EMITIDO
		IF FIELDTYPE(InputRoot.XMLNSC.am:fault.am:code) IS NOT NULL THEN
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || InputRoot.XMLNSC.am:fault.am:description;
		ELSEIF FIELDTYPE(InputRoot.SOAP.soap:Body.soap:Fault.soap:faultstring) IS NOT NULL THEN
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || InputRoot.SOAP.Body.Fault.faultstring;
		ELSEIF FIELDTYPE(InputRoot.JSON.Data.fault.code) IS NOT NULL THEN
			SET ERRO = InputRoot.JSON.Data.fault.code || ' - ' || InputRoot.JSON.Data.fault.message || ' - ' || InputRoot.JSON.Data.fault.description;
		ELSEIF EXISTS(InputRoot.BLOB.BLOB[]) THEN
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || CAST(InputRoot.BLOB.BLOB AS CHAR CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		ELSEIF EXISTS(InputExceptionList.RecoverableException[]) THEN
			
			DECLARE envRef REFERENCE TO Environment.Variables;
			DECLARE error REFERENCE TO InputExceptionList.*[1];
			DECLARE lastError REFERENCE TO InputExceptionList.*[1];
			DECLARE concatenaErros CHARACTER ' | Message exception: ';

			WHILE error.Number IS NOT NULL do
				set envRef.BrokerData.LastError.Label = error.Label;
				set envRef.BrokerData.LastError.Number = cast(error.Number as char);
				set envRef.BrokerData.LastError.Text = error.Text;
				MOVE error LASTCHILD;
			END WHILE;

			MOVE error PARENT;
			MOVE error FIRSTCHILD;
			MOVE error NEXTSIBLING NAME 'Insert';

			WHILE LASTMOVE(error) DO
				SET concatenaErros = concatenaErros || ' - ' || COALESCE(error.Text,'');
				MOVE error NEXTSIBLING;
			END WHILE;

			SET ERRO = COALESCE(envRef.BrokerData.LastError.Text,'');
			SET ERRO = COALESCE(CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER),'500') || ' - ' || ERRO || ' - ' || COALESCE(concatenaErros, '');
		
		END IF;
	
		--VALIDA O TIPO DE OBJETO 
		DECLARE msgErro CHAR '';
		IF Environment.Variables.msgMQ.tipo = 'CONTRATO' THEN
			CASE
			WHEN Environment.Variables.etapa.nome = 'Buscar Lista Contrato CRM'  THEN
				SET msgErro = 'Falha ao buscar a fila de contrato no CRM';		
			WHEN Environment.Variables.etapa.nome = 'Enviar Fila MQ'  THEN
				SET msgErro = 'Falha ao enviar contrato para a fila MQ';	
			WHEN Environment.Variables.etapa.nome = 'Buscar Contrato CRM'  THEN
				SET msgErro = 'Falha ao buscar o contrato no CRM: ' || Environment.Variables.idRegistro;	
			WHEN Environment.Variables.etapa.nome = 'Buscar Proposta SGT'  THEN
				SET msgErro = 'Falha ao buscar a proposta no SGT: ' || Environment.Variables.SGTcodigoIntegracaoProposta || 
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;
			WHEN Environment.Variables.etapa.nome = 'Inserir Proposta SGT'  THEN
				SET msgErro = 'alha ao cadastrar a proposta no SGT: ' || Environment.Variables.SGTcodigoIntegracaoProposta ||
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;
			WHEN Environment.Variables.etapa.nome = 'Buscar Cliente CRM'  THEN
				SET msgErro = 'Falha ao buscar cliente no CRM ' || Environment.Variables.CRMcnpjCpf ||
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;	
			WHEN Environment.Variables.etapa.nome = 'Buscar Cliente SGT'  THEN
				SET msgErro = 'Falha ao buscar cliente no SGT: ' || Environment.Variables.CRMcnpjCpf ||
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;	
			WHEN Environment.Variables.etapa.nome = 'Inserir Cliente SGT'  THEN
				SET msgErro = 'Falha ao cadastrar cliente no SGT: ' || Environment.Variables.CRMcnpjCpf ||
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;					
			WHEN Environment.Variables.etapa.nome = 'Inserir Endereço SGT'  THEN
				SET msgErro = 'Falha ao cadastrar endereço no SGT ' || Environment.Variables.CRMcnpjCpf ||
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;	
			WHEN Environment.Variables.etapa.nome = 'Atualizar Endereço SGT'  THEN
				SET msgErro = 'Falha ao atualizar endereço do cliente no SGT ' || Environment.Variables.CRMcnpjCpf ||
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;	
			WHEN Environment.Variables.etapa.nome = 'Buscar Atendimento SGT'  THEN
				SET msgErro = 'Falha ao buscar atendimento no SGT: ' || Environment.Variables.SGTcodigoIntegracaoProposta || 
									' Contrato: ' || Environment.Variables.CRMcontratoResult.codigoContratoCTR ||
										' Unidade: ' || Environment.Variables.CRMcontratoResult.codUnidadeOp;
			WHEN Environment.Variables.etapa.nome = 'Buscar Produto Regional SGT'  THEN
				SET msgErro = 'Falha ao Buscar Produto Regional SGT';				
			WHEN Environment.Variables.etapa.nome = 'Inserir Atendimento SGT'  THEN
				SET msgErro = 'Falha ao Inserir Atendimento SG';	
			WHEN Environment.Variables.etapa.nome = 'Atualizar Atendimento SGT'  THEN
				SET msgErro = 'Falha ao Atualizar Atendimento SGT';	
			WHEN Environment.Variables.etapa.nome = 'Remover Contrato CRM'  THEN
				SET msgErro = 'Falha ao Remover Contrato CRM';												
			END CASE;			
		ELSEIF Environment.Variables.msgMQ.tipo = 'PRODUTO' THEN
			CASE
			WHEN Environment.Variables.etapa.nome = 'Buscar Produto SGT'  THEN
				CALL br.org.fiep.esb.utils.v1.throw('EN:401', 'Produto Regional nao encontrado no SGT: ' || Environment.Variables.msgMQ.idFila, BrokerName);	
			WHEN Environment.Variables.etapa.nome = 'Inserir Produto SGT'  THEN
				CALL br.org.fiep.esb.utils.v1.throw('EN:401', 'Falha ao inserir Produto Regional no SGT: ' || Environment.Variables.retornoCrm.codigoProduto, BrokerName);		
			WHEN Environment.Variables.etapa.nome = 'Atualizar Produto SGT'  THEN
				CALL br.org.fiep.esb.utils.v1.throw('EN:401', 'Falha ao atualizar Produto Regional no SGT: ' || Environment.Variables.retornoCrm.codigoProduto, BrokerName);	
			WHEN Environment.Variables.etapa.nome = 'Remover Produto CRM'  THEN
				CALL br.org.fiep.esb.utils.v1.throw('EN:401', 'Falha ao remover item da fila do CRM: ' || Environment.Variables.retornoCrm.codigoProduto, BrokerName);		
			END CASE;			
		END IF;	
		
		-- DECLARA VARIAVEIS
		DECLARE jsonBlob BLOB;
		DECLARE jsonMsg CHAR;
		DECLARE options INTEGER BITOR(FolderBitStream, ValidateNone);	
		
		-- ERRO							
		SET OutputRoot.JSON.Data.idEtapa = Environment.Variables.idEtapa;
		SET OutputRoot.JSON.Data.erro = msgErro || ' - ' || ERRO;
		SET OutputRoot.JSON.Data.localTransactionId = Environment.Monitoring.EventCorrelation.localTransactionId;

		SET jsonBlob = ASBITSTREAM(OutputRoot.JSON.Data,,1208,,,,options);
		SET jsonMsg = CAST(jsonBlob AS CHAR ENCODING 1208);	
		
		IF Environment.Variables.msgMQ.tipo = 'CONTRATO' THEN
			CALL procs.upsetErroContrato(jsonMsg, Environment.Variables.idErro);
		ELSEIF Environment.Variables.msgMQ.tipo = 'PRODUTO' THEN
			CALL procs.upsetErroProduto(jsonMsg, Environment.Variables.idErro);
		END IF;
		COMMIT;

		-- ETAPA
		CALL procs.selectNomeEtapa(Environment.Variables.etapa.nome, Environment.Variables.etapa.tipo, Environment.Variables.etapa.Item[]);
		
		SET OutputRoot.JSON.Data.idEtapa = Environment.Variables.idEtapa;
		SET OutputRoot.JSON.Data.idHistorico = Environment.Variables.idHistorico;
		SET OutputRoot.JSON.Data.idNomeEtapa = Environment.Variables.etapa.Item.id;
		SET OutputRoot.JSON.Data.status = Environment.Variables.etapa.status;
		SET OutputRoot.JSON.Data.sucesso = Environment.Variables.etapa.sucesso;

		SET jsonBlob = ASBITSTREAM(OutputRoot.JSON.Data,,1208,,,,options);
		SET jsonMsg = CAST(jsonBlob AS CHAR ENCODING 1208);	
		
		IF Environment.Variables.msgMQ.tipo = 'CONTRATO' THEN
			CALL procs.upsetEtapaContrato(jsonMsg, Environment.Variables.idEtapa);
		ELSEIF Environment.Variables.msgMQ.tipo = 'PRODUTO' THEN
			CALL procs.upsetEtapaProduto(jsonMsg, Environment.Variables.idErro);
		END IF;
		COMMIT;		
		
		-- HISTORICO
		SET OutputRoot.JSON.Data.idFila = Environment.Variables.msgMQ.idFila;
		SET OutputRoot.JSON.Data.idRegistro = Environment.Variables.msgMQ.idRegistro;
		SET OutputRoot.JSON.Data.id = Environment.Variables.msgMQ.idHistorico;
		SET OutputRoot.JSON.Data.status = 'Falha';
		SET OutputRoot.JSON.Data.sucesso = false;
			
		SET jsonBlob = ASBITSTREAM(OutputRoot.JSON.Data,,1208,,,,options);
		SET jsonMsg = CAST(jsonBlob AS CHAR ENCODING 1208);	
		
		IF Environment.Variables.msgMQ.tipo = 'CONTRATO' THEN
			CALL procs.upsetHistoricoContrato(jsonMsg, Environment.Variables.idHistorico);
		ELSEIF Environment.Variables.msgMQ.tipo = 'PRODUTO' THEN
			CALL procs.upsetEtapaProduto(jsonMsg, Environment.Variables.idErro);
		END IF;
		COMMIT;		
					
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
