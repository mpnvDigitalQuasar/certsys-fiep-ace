BROKER SCHEMA br.org.fiep.esb.appsgt


CREATE COMPUTE MODULE processarContratoAsync_orquestarValidarCliente
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
			
		IF FIELDTYPE(InputRoot.JSON.Data.Clientes.Cliente.id) IS NULL THEN			
			
			-- Cadastrar cliente SGT
			PROPAGATE TO LABEL 'lbCriarClienteSGT';
			
			--Falha de contrato. Passa para o proximo
			IF Environment.Variables.etapa.status = 'Falha' THEN
				CALL br.org.fiep.esb.utils.v1.throw('EN:401', 'Falha ao inserir criar cliente no SGT', BrokerName);
			END IF;
			
		ELSEIF EXISTS(InputRoot.JSON.Data.Clientes.Cliente.Enderecos.Endereco[]) IS NULL THEN		
				
			-- Cadastrar endereço cliente
			PROPAGATE TO LABEL 'lbCriarEnderecoClienteSGT';
			
			--Falha de contrato. Passa para o proximo
			IF Environment.Variables.etapa.status = 'Falha' THEN
				CALL br.org.fiep.esb.utils.v1.throw('EN:401', 'Falha ao inserir criar endereço no SGT', BrokerName);
			END IF;
			
		ELSE
			
			SET Environment.Variables.SGTclienteEndereco = InputRoot.JSON.Data.Clientes.Cliente.Enderecos.Endereco;
			
			-- Atualizar endereço cliente
			PROPAGATE TO LABEL 'lbAtualizarEnderecoClienteSGT';
			
			--Falha de contrato. Passa para o proximo
			IF Environment.Variables.etapa.status = 'Falha' THEN
				CALL br.org.fiep.esb.utils.v1.throw('EN:401', 'Falha ao inserir atualizar endereço no SGT', BrokerName);
			END IF;
			
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
