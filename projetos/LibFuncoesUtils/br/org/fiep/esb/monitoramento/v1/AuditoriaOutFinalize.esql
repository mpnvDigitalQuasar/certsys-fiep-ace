BROKER SCHEMA br.org.fiep.esb.monitoramento.v1



CREATE COMPUTE MODULE AuditoriaOutFinalize
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		IF Environment.Variables.formato = 'REST' THEN
		   SET Environment.Variables.eventName = 'API OUTPUT';
		   IF Environment.Monitoring.EventCorrelation.localTransactionId IS NOT NULL THEN
		      SET OutputRoot.JSON.Data.monitoramento.localTransactionId = Environment.Monitoring.EventCorrelation.localTransactionId;
		   ELSE
		      SET OutputRoot.JSON.Data.monitoramento.localTransactionId = '';
		   END IF; 
		   SET OutputRoot.JSON.Data.monitoramento.localTransactionDate = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'yyyy-MM-dd''T''HH:mm:ss'); 
		ELSEIF Environment.Variables.formato = 'SOAP' THEN
		   SET Environment.Variables.eventName = 'WS OUTPUT'; 
		   IF Environment.Monitoring.EventCorrelation.localTransactionId IS NOT NULL THEN
		      SET OutputRoot.XMLNSC.[>1].monitoramento.localTransactionId = Environment.Monitoring.EventCorrelation.localTransactionId;
		   ELSE
		      SET OutputRoot.XMLNSC.[>1].monitoramento.localTransactionId = '';
		   END IF; 
		   SET OutputRoot.XMLNSC.[>1].monitoramento.localTransactionDate = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss'); 
		ELSEIF Environment.Variables.formato = 'MQ' THEN
		   SET Environment.Variables.eventName = 'MQ OUTPUT'; 
		   --IF Environment.Monitoring.EventCorrelation.localTransactionId IS NOT NULL THEN
		   --   SET OutputRoot.XMLNSC.[>1].monitoramento.localTransactionId = Environment.Monitoring.EventCorrelation.localTransactionId;
		   --ELSE
		   --   SET OutputRoot.XMLNSC.[>1].monitoramento.localTransactionId = '';
		   --END IF; 
		   --SET OutputRoot.XMLNSC.[>1].monitoramento.localTransactionDate = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss'); 		   
		ELSE
		   SET Environment.Variables.eventName = 'OUTPUT'; 	   
		END IF;
		   
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
