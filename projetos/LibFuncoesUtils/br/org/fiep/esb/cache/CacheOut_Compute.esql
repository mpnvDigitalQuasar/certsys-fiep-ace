BROKER SCHEMA br.org.fiep.esb.cache


CREATE COMPUTE MODULE CacheOut_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
					
		DECLARE messageIn CHAR;
		DECLARE messageOut CHAR;
		DECLARE key CHAR;
		
		Routing: BEGIN ATOMIC -- beginning of atomic block. Processing is single threaded until the END is reached.
			DECLARE cacheData ROW;
			DECLARE sql CHAR;
			SET key 			= Environment.Variables.key;				
			SET messageIn 		= Environment.Variables.messageIn;
			SET CacheFile.valid = true;
			
			DECLARE refToDataOut REFERENCE TO InputRoot.JSON.Data;
			IF lastmove(refToDataOut) THEN
				DECLARE jsonBlob BLOB;
				DECLARE JSON CHAR;
				
				
				--DECLARE options INTEGER BITOR(FolderBitStream, ValidateNone);	
				DECLARE options INTEGER BITOR(FolderBitStream, ValidateNone);                        	  
				SET jsonBlob = ASBITSTREAM(InputRoot.JSON.Data,,1208,,,,options);
				SET JSON = CAST(jsonBlob AS CHAR ENCODING Environment.Variables.Properties.Encoding);			
				SET messageOut =  BASE64ENCODE(JSON);
				
				--SET Environment.Variables.messageOut = messageOut;
			END IF;	
				
			DECLARE retorno ROW;
			DECLARE resultado INT;
			 			
			SET cacheData.RetornoDados = CacheFile.{key};
			IF cacheData.RetornoDados IS NOT NULL THEN 
				--atualiza dados na cache
				DELETE FIELD CacheFile.{key};
				SET CacheFile.{key} = messageOut;	
			ELSE
				CREATE LASTCHILD OF CacheFile  NAME key VALUE messageOut;
			END IF;
			
			--atualiza dados no banco de dados
			CALL insere_cache_banco(key,
									Environment.Variables.input.nomeOperacao,
									Environment.Variables.input.nomeApi,
									messageIn,
									messageOut
									) INTO resultado;																
																 	 
		END Routing;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE insere_cache_banco(
		IN key CHAR
		,IN nomeOperacao CHAR
		,IN nomeApi CHAR
		,IN requisicaoIn CHAR
		,IN requisicaoOut CHAR
	)
	RETURNS INT
	LANGUAGE DATABASE
	EXTERNAL NAME "dbo.IIB_SP_INS_UPD_CACHE";

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
