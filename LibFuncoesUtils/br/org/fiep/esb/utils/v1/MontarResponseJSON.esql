BROKER SCHEMA br.org.fiep.esb.utils.v1



CREATE COMPUTE MODULE MontarResponseJSON
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		
		SET Environment.Variables.isExecutionError = TRUE;
		
		IF (InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 500 OR 
		    InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 400 OR
		    InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 401)AND 
		    Environment.Variables.Error.application IS NULL THEN
		    SET OutputRoot = InputRoot;
		    IF Environment.Monitoring.EventCorrelation.localTransactionId IS NOT NULL THEN
		       SET OutputRoot.JSON.Data.error.localtransactionId = Environment.Monitoring.EventCorrelation.localTransactionId;
		    ELSE
		       SET OutputRoot.JSON.Data.error.localtransactionId = '';
		    END IF;
		    SET OutputRoot.JSON.Data.error.localTransactionDate = converterDatetime(CURRENT_TIMESTAMP);
		    RETURN TRUE;
		END IF;	
		
		DECLARE codeError CHAR Environment.Variables.Error.code;
		
		DECLARE sql CHAR 'SELECT  M.codeError, 
		                          M.messageError, 
		                          M.status, 
		                          M.creationDate, 
		                          HC.httpCode, 
		                          HC.httpMessage 
                         FROM IIB_MESSAGE_ERROR_TYPE AS M
                          INNER JOIN IIB_HTTP_CODE AS HC ON HC.httpCode = M.httpCode
							WHERE 	M.codeError = ''' || codeError ||'''';
										 	
		SET Environment.Variables.Error.messageErrorTable[] = PASSTHRU(sql);		
				
		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = CAST(Environment.Variables.Error.messageErrorTable.httpCode AS INT);
		
		SET OutputRoot.JSON.Data.httpCode = Environment.Variables.Error.messageErrorTable.httpCode;
		SET OutputRoot.JSON.Data.httpMessage = Environment.Variables.Error.messageErrorTable.httpMessage;
		SET OutputRoot.JSON.Data.error.code = Environment.Variables.Error.messageErrorTable.codeError;
				
		IF Environment.Variables.Error.field IS NOT NULL THEN
		   IF codeError = 'ET:001' THEN
		      SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.messageErrorTable.messageError || Environment.Variables.Error.field;
		   ELSE
		   	  SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.messageErrorTable.messageError || Environment.Variables.Error.field;
		   	  IF Environment.Variables.Error.value IS NOT NULL THEN
		   	  	 SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.messageErrorTable.messageError || Environment.Variables.Error.value;
		   	  END IF;
		   END IF;		
		ELSEIF Environment.Variables.Error.application IS NOT NULL THEN
		   SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.messageErrorTable.messageError || Environment.Variables.Error.application;
		ELSE
		   SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.messageErrorTable.messageError; 	
		END IF;
		--monta resposta no caso de erro no banco
		IF Environment.Variables.Error.banco IS NOT NULL THEN
		   SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.messageErrorTable.messageError || Environment.Variables.Error.banco; 
		END IF;
		
		IF Environment.Variables.Error.messageError IS NOT NULL THEN
			SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.messageErrorTable.messageError || Environment.Variables.Error.messageError;
		END IF;
		
		IF codeError = 'EP:003' THEN
			SET OutputRoot.JSON.Data.error.message = Environment.Variables.Error.message;
		END IF;	
		
		IF Environment.Variables.Error.application IS NOT NULL THEN
		   SET OutputRoot.JSON.Data.error.application = Environment.Variables.Error.application;
		ELSE
		   SET OutputRoot.JSON.Data.error.application = BrokerName;
		END IF;
		
		IF Environment.Monitoring.EventCorrelation.localTransactionId IS NOT NULL THEN
		   SET OutputRoot.JSON.Data.error.localtransactionId = Environment.Monitoring.EventCorrelation.localTransactionId;
		ELSE
		   SET OutputRoot.JSON.Data.error.localtransactionId = '';
		END IF;
		   
		SET OutputRoot.JSON.Data.error.localTransactionDate = converterDatetime(CURRENT_TIMESTAMP);
		
		-- erro desconhecido retorna a exceptionList para analise do problema
		IF codeError = 'EP:999' --OR 
		  --(Environment.Variables.Error.application <> BrokerName AND Environment.Variables.Error.BIP <> 3016) 
		  THEN
		   CREATE LASTCHILD OF Environment.Variables DOMAIN 'XMLNSC' NAME 'ExceptionList';
		   SET Environment.Variables.ExceptionList = InputExceptionList;
		   	
		   DECLARE Exception_BLOB BLOB ASBITSTREAM(Environment.Variables.ExceptionList CCSID 1208 ENCODING 546);
		   DECLARE Exception_CHAR CHAR CAST(Exception_BLOB AS CHAR CCSID 1208 ENCODING 546);
		   
		   SET OutputRoot.JSON.Data.error.exception = Exception_CHAR;
		ELSE
		   SET OutputRoot.JSON.Data.error.exception = '';    
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
