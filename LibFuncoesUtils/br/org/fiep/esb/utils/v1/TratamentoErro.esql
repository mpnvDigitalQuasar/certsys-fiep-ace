BROKER SCHEMA br.org.fiep.esb.utils.v1

DECLARE Legacy_System EXTERNAL CHAR '';

CREATE PROCEDURE throw(IN errorCode CHAR, IN field CHAR, IN application CHAR)      -- Throws an exception
   BEGIN
      THROW USER EXCEPTION Message 3012 VALUES(errorCode ||'::'|| field ||'::'|| application);
   END; 
   
CREATE PROCEDURE throwPaginationException(IN errorCode CHAR, IN field CHAR, IN value INT, IN application CHAR)      -- Throws an exception
   BEGIN
      THROW USER EXCEPTION Message 3015 VALUES(errorCode ||'::'|| field || '::' || CAST(value AS CHAR) || '::' || application);
   END;
   
   
 CREATE PROCEDURE throwLegacyException(IN errorCode CHAR, IN application CHAR, IN message CHAR)      -- Throws an exception
   BEGIN
      THROW USER EXCEPTION Message 3016 VALUES(errorCode ||'::'|| application ||'::'|| message);
   END; 
       
  
CREATE COMPUTE MODULE TratamentoErro
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		IF InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 500 OR 
		   InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 503 OR 
		   InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 400 OR
		   InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 401 OR
		   InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 404 OR
		   InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" IS NOT NULL THEN
		   IF Legacy_System <> '' THEN
		   	  SET Environment.Variables.Error.code = 'EP:008';	
		   	  SET Environment.Variables.Error.application = Legacy_System;
		   	  
		   	  CASE Legacy_System
		   	  WHEN 'ERP' THEN
		   	     SET Environment.Variables.Error.messageError = InputRoot.JSON.Data.Message;
		   	     IF InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 503 THEN
		   	     	SET Environment.Variables.Error.messageError = 'Servico Indisponivel - HTTP STATUS 503';
		   	     END IF;	
		   	  ELSE
		   	  	 SET Environment.Variables.Error.messageError = InputRoot.JSON.Data.error.message; 
		   	  END CASE;
		   ELSE
		      SET OutputRoot = InputRoot;
		   END IF;
		   RETURN TRUE;
		END IF;	
				
		DECLARE env REFERENCE TO Environment;
		
		------
		-- Procedure popula o BIP e a mensagem de erro
		-- env.Variables.Error.BIP
		-- env.Variables.Error.message
		------
		CALL obterExptionBIP(InputExceptionList, env);
		
		CASE env.Variables.Error.BIP
		WHEN 2322 THEN
			SET env.Variables.Error.code = tratarErroDatabase(env.Variables.Error.message, env, env.Variables.Error.BIP);	
		WHEN 2592 THEN
			SET env.Variables.Error.code = tratarErroConversaoTipo(env.Variables.Error.message, env, env.Variables.Error.BIP);	
		WHEN 2595 THEN
			SET env.Variables.Error.code = tratarErroConversaoTipo(env.Variables.Error.message, env, env.Variables.Error.BIP);	
		WHEN 2461 THEN
			SET env.Variables.Error.code = tratarErroConversaoTipo(env.Variables.Error.message, env, env.Variables.Error.BIP);	
		WHEN 3204 THEN
			SET env.Variables.Error.code = tratarErroConversaoTipo(env.Variables.Error.message, env, env.Variables.Error.BIP);
		WHEN 2327 THEN
			SET env.Variables.Error.code = tratarErroConversaoTipo(env.Variables.Error.message, env, env.Variables.Error.BIP);					
		WHEN 2702 THEN
			SET env.Variables.Error.code = tratarErroSeguranca(env.Variables.Error.message);
		WHEN 2703 THEN
			SET env.Variables.Error.code = tratarErroSeguranca(env.Variables.Error.message);			
		WHEN 2725 THEN
			SET env.Variables.Error.code = tratarErroSeguranca(env.Variables.Error.message);
		WHEN 2732 THEN
			SET env.Variables.Error.code = tratarErroSeguranca(env.Variables.Error.message);
		WHEN 3012 THEN
			SET env.Variables.Error.code = tratarErroNegocio(env.Variables.Error.message, env);
		WHEN 3015 THEN
			SET env.Variables.Error.code = tratarErroPaginacao(env.Variables.Error.message, env);
		WHEN 3016 THEN
			SET env.Variables.Error.code = tratarErroLegado(env.Variables.Error.message, env);				
		WHEN 3150 THEN
			SET env.Variables.Error.code = tratarErroSocket(env.Variables.Error.message, env, Legacy_System);
		WHEN 3151 THEN
			SET env.Variables.Error.code = tratarErroTimeout(env.Variables.Error.message, env, Legacy_System);
		WHEN 3166 THEN
			SET env.Variables.Error.code = tratarErroTimeout(env.Variables.Error.message, env, Legacy_System);	
		WHEN 3691 THEN
			SET env.Variables.Error.code = tratarErroUrlUnauthorized(env.Variables.Error.message, env, Legacy_System);		
		WHEN 5025 THEN
			SET env.Variables.Error.code = tratarErroParser (env.Variables.Error.message, env.Variables.Error.BIP);
		WHEN 5719 THEN
			SET env.Variables.Error.code = tratarErroParser (env.Variables.Error.message, env.Variables.Error.BIP);	
										
		ELSE
			-- erro desconhecido
			SET env.Variables.Error.code = 'EP:999';	
		END CASE;
		
		RETURN TRUE;
	END;

	CREATE FUNCTION tratarErroDatabase (IN message CHAR, IN env REFERENCE, IN bip INT) RETURNS CHAR
	BEGIN 
	   IF bip = 2322 THEN
	   		IF POSITION('[Microsoft][ODBC SQL Server Driver][SQL Server]Erro ao inserir' IN env.Variables.Error.valorConversao) > 0 THEN
	   			SET env.Variables.Error.banco = REPLACE(env.Variables.Error.valorConversao, '[Microsoft][ODBC SQL Server Driver][SQL Server]', '');
	   			RETURN 'EP:002';
	   		ELSE   			
	   	  		RETURN 'EP:006';
	   		END IF;
	   ELSE
	   	  RETURN 'EP:999';  
	   END IF; 	
	END;
		
	CREATE FUNCTION tratarErroConversaoTipo (IN message CHAR, IN env REFERENCE, IN bip INT) RETURNS CHAR
	BEGIN 
	   IF message = 'Invalid characters' OR
	   	  message = 'Invalid timestamp string' OR 
	   	  message = 'Unable to identify date or time I/T pattern' OR
	   	  message = 'Invalid date' THEN
	   	  SET Environment.Variables.Error.field = obterNomeVariavel(env.Variables.Error.campo, env);
	   	  IF bip = 2592 THEN
	   	  	 SET env.Variables.Error.erroConversao = 'Character to Decimal: ' || env.Variables.Error.field;
	   	  ELSEIF bip = 2595 THEN
	   	  	 SET env.Variables.Error.erroConversao = 'Character to Integer: ' || env.Variables.Error.field;
	   	  ELSEIF bip = 2461 THEN
	   	  	 SET env.Variables.Error.erroConversao = 'Character to Timestamp: ' || env.Variables.Error.field;
		  ELSEIF bip = 2327 THEN
	   	  	 SET env.Variables.Error.erroConversao = 'Character to Timestamp: ' || env.Variables.Error.field;	   	  	 
	   	  END IF; 
	   	  RETURN 'ET:001';
	   ELSE
	   	  RETURN 'EP:999';
	   END IF;
	END;
	
	CREATE FUNCTION tratarErroSeguranca (IN message CHAR) RETURNS CHAR
	BEGIN 
	   IF message = 'Username and password' OR
	   	  message = 'Cache has identity authentication invalid' OR
	   	  message = 'User does not exist' OR
	   	  message = 'Authorization check in Mutilple groups Failed' OR
	   	  message = 'User is not in Broker authorization group' OR
	   	  message = 'Cache has identity authorization invalid' OR
	   	  message = '[LDAP: error code 49 - 80090308: LdapErr: DSID-0C090400, comment: AcceptSecurityContext error, data 52e, v1db1' THEN
	   	  RETURN 'EN:401';
	   ELSEIF message = 'IdentityType is Current Token (none), but no suitable identity available in Properties tree' THEN
	      RETURN 'EN:004';
	   ELSEIF message = 'Caught configuration exception, logged. Throwing new recoverable exception.' THEN
	   	  RETURN 'EP:004';
	   ELSE
	   	  RETURN 'EP:999';
	   END IF;
	END;
	
	CREATE FUNCTION tratarErroNegocio (IN message CHAR, IN env REFERENCE) RETURNS CHAR
	BEGIN 
		CALL Split(message, env, '::');
		
		SET env.Variables.Error.code = env.Split.Array[1];
		SET env.Variables.Error.field = env.Split.Array[2];
		SET env.Variables.Error.application = env.Split.Array[3];
		
		RETURN env.Variables.Error.code;
	END;
	
	CREATE FUNCTION tratarErroPaginacao (IN message CHAR, IN env REFERENCE) RETURNS CHAR
	BEGIN 
		CALL Split(message, env, '::');
		
		SET env.Variables.Error.code = env.Split.Array[1];
		SET env.Variables.Error.field = env.Split.Array[2];
		SET env.Variables.Error.value = env.Split.Array[3];
		SET env.Variables.Error.application = env.Split.Array[4];
		
		RETURN env.Variables.Error.code;
	END;

	CREATE FUNCTION tratarErroSocket (IN message CHAR, IN env REFERENCE, IN Legacy_System CHAR) RETURNS CHAR
	BEGIN 
	   IF (POSITION('getsockopt' IN message) > 0) OR message = 'An error occurred whilst performing a socket operation' THEN
	   	  IF Legacy_System <> '' THEN
	   	  	 SET Environment.Variables.Error.application = Legacy_System;
	   	  END IF;
	   	  RETURN 'EP:005';
	   ELSE
	   	  RETURN 'EP:999';
	   END IF;
	END;
		
	CREATE FUNCTION tratarErroTimeout (IN message CHAR, IN env REFERENCE, IN Legacy_System CHAR) RETURNS CHAR
	BEGIN 
	   IF POSITION('timeout' IN message) > 0 THEN
	   	  IF Legacy_System <> '' THEN
	   	  	 SET Environment.Variables.Error.application = Legacy_System;
	   	  END IF;
	   	  RETURN 'EP:001';
	   ELSE
	   	  RETURN 'EP:999';
	   END IF;
	END;

	CREATE FUNCTION tratarErroUrlNotFound (IN message CHAR, IN env REFERENCE, IN Legacy_System CHAR) RETURNS CHAR
	BEGIN 
	   SET Environment.Variables.Error.application = Legacy_System;
	   SET Environment.Variables.Error.message =  Environment.Variables.Error.message || ' 404 NOT FOUND ' || Environment.Variables.Error.valorConversao;
	   RETURN 'EP:003';
	END;
	
	
	CREATE FUNCTION tratarErroUrlUnauthorized (IN message CHAR, IN env REFERENCE, IN Legacy_System CHAR) RETURNS CHAR
	BEGIN 
	   SET Environment.Variables.Error.application = Legacy_System;
	   SET Environment.Variables.Error.message =  Environment.Variables.Error.message || ' 401 Unauthorized ' || Environment.Variables.Error.valorConversao;
	   RETURN 'EN:401';
	END;	
	
	CREATE FUNCTION tratarErroParser (IN message CHAR, IN bip INT) RETURNS CHAR
	BEGIN 
	   IF bip = 5025 THEN
	   	  RETURN 'EP:007';
	   ELSEIF bip = 5719 THEN
	   	  RETURN 'EP:009';
	   ELSE
	   	  RETURN 'EP:999';  
	   END IF; 	
	END;

	CREATE FUNCTION tratarErroLegado (IN message CHAR, IN env REFERENCE) RETURNS CHAR
	BEGIN 
		CALL Split(message, env, '::');
		
		SET env.Variables.Error.code = env.Split.Array[1];
		SET env.Variables.Error.application = env.Split.Array[2];
		SET env.Variables.Error.messageError = env.Split.Array[3];
		
		RETURN env.Variables.Error.code;
	END;	
	CREATE PROCEDURE obterExptionBIP (IN InputExceptionList REFERENCE, IN env REFERENCE) 
	BEGIN 
		DECLARE BIP INTEGER;
		DECLARE Text CHARACTER;
		DECLARE Label CHARACTER;
		DECLARE I INTEGER 1;
		DECLARE numSubs INTEGER;
		DECLARE start REFERENCE TO InputExceptionList.*[1];

		WHILE start.Number IS NOT NULL DO 
			SET Label = start.Label;
			SET BIP = start.Number;
			IF BIP >= 3001 AND BIP <= 3049 THEN
				SET Text = start.Insert.Text;
			ELSE
				SET Text = start.Text;
			END IF;
			
			DECLARE Inserts Character;
			DECLARE INS Integer;
			SET Inserts = '';
			-- Verifica se ha inserts nesta excecao
			IF EXISTS (start.Insert[]) THEN
			   SET Inserts = Inserts || COALESCE(start.Insert[1].Text,'NULL')|| ' / ';
			   DECLARE K INTEGER 1;
			   INSERTS: LOOP
			      IF CARDINALITY(start.Insert[])> K THEN 
				     SET env.Variables.Error.valorConversao = COALESCE(start.Insert[K+1].Text,'NULL');
				     IF POSITION('DECLARE' IN UPPER(COALESCE(start.Insert[K+1].Text,'NULL'))) > 0 OR
					    POSITION('SET' IN UPPER(COALESCE(start.Insert[K+1].Text,'NULL'))) > 0 THEN
					    SET env.Variables.Error.campo = COALESCE(start.Insert[K+1].Text,'NULL');
				     END IF;
				     IF POSITION('cvc-datatype-valid' IN LOWER(COALESCE(start.Insert[K+1].Text,'NULL'))) > 0 OR
				     	POSITION('cvc-complex-type' IN LOWER(COALESCE(start.Insert[K+1].Text,'NULL'))) > 0THEN
					    SET env.Variables.Error.parserError = COALESCE(start.Insert[K+1].Text,'NULL');
				     END IF;
			      -- Nao tem mais inserts para prosegguir
			      ELSE 
			   	     LEAVE INSERTS;
			   END IF;
			   SET K = K+1;
			   END LOOP INSERTS;
			END IF;
				
			SET env.Variables.Error.BIP = BIP;
			SET env.Variables.Error.message = Text;
			SET I = I+1; 
			
			MOVE start LASTCHILD;
		END WHILE;		
	END;
	
	CREATE FUNCTION obterNomeVariavel (IN linha CHAR, IN env REFERENCE) RETURNS CHAR
	BEGIN
		DECLARE campo CHAR;
		IF POSITION('DECLARE' IN UPPER(linha)) > 0 AND
		   POSITION('CAST' IN UPPER(linha)) > 0 THEN
		   SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER 'CAST(') BEFORE ' AS'));
		   RETURN splitField(campo, env);			
		ELSEIF POSITION('DECLARE' IN UPPER(linha)) > 0 AND
		       POSITION('CAST' IN UPPER(linha)) = 0 THEN
		   IF POSITION('INTEGER' IN UPPER(linha)) > 0 THEN    
		      SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER 'INTEGER') BEFORE ';'));
		   ELSEIF POSITION('INT' IN UPPER(linha)) > 0 THEN    
		      SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER 'INT') BEFORE ';'));
		   ELSEIF POSITION('DECIMAL' IN UPPER(linha)) > 0 THEN    
		      SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER 'DECIMAL') BEFORE ';'));
  		   ELSEIF POSITION('TIMESTAMP' IN UPPER(linha)) > 0 THEN    
		      SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER 'TIMESTAMP') BEFORE ';'));	
		   ELSEIF POSITION('DATE' IN UPPER(linha)) > 0 THEN    
		      SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER 'TIMESTAMP') BEFORE ';'));				      	      
		   END IF;         
		   RETURN splitField(campo, env);		
		ELSEIF POSITION('SET' IN UPPER(linha)) > 0 AND
		       POSITION('CAST' IN UPPER(linha)) > 0 THEN
		   SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER 'CAST(') BEFORE ' AS'));
		   RETURN splitField(campo, env);		
		ELSEIF POSITION('SET' IN UPPER(linha)) > 0 AND
		       POSITION('CAST' IN UPPER(linha)) = 0 THEN
		   SET campo = TRIM(SUBSTRING(SUBSTRING(linha AFTER '=') BEFORE ';'));
		   RETURN splitField(campo, env);	
		ELSE
		   RETURN linha;
		END IF;   	
	END;
	
	CREATE FUNCTION splitField(IN campo CHAR, IN env REFERENCE) RETURNS CHAR
	BEGIN
		IF POSITION('.' IN campo) > 0 THEN
		   CALL Split(campo, env, '.'); 
		   RETURN env.Split.Array[CARDINALITY(env.Split.Array[])]; 
		ELSE
		   RETURN campo;   	   
		END IF;	   
	END;
	
END MODULE;